#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH
source ${OPENSHIFT_HHVM_DIR}lib/util

NGINX_CFG_FILE=${OPENSHIFT_HHVM_DIR}configuration/etc/nginx.conf
NGINX_PID_FILE=${OPENSHIFT_HHVM_DIR}run/nginx.pid
PHP_CFG_FILE=${OPENSHIFT_REPO_DIR}config/hhvm.d/config.ini
PHP_PID_FILE=${OPENSHIFT_DATA_DIR}hhvm.pid

function _nginx() {
    LD_LIBRARY_PATH=$OPENSHIFT_HHVM_DIR ${OPENSHIFT_HHVM_DIR}usr/sbin/nginx "$@" >> $OPENSHIFT_HHVM_LOG_DIR/nginx_stdout.log 2>&1
    echo "nginx started"
}

function _start_php() {
    LD_LIBRARY_PATH=${OPENSHIFT_HHVM_DIR}usr/bin ${OPENSHIFT_HHVM_DIR}usr/bin/hhvm --mode daemon --config ${PHP_CFG_FILE} -vServer.Type=fastcgi -vServer.FileSocket=${OPENSHIFT_DATA_DIR}hhvm.sock -vEval.EnableZendCompat=true
    echo "HHVM started"
}

function _start_nginx() {
    mkdir -p /tmp/nginx
    mkdir -p /tmp/nginx/client_body

    if ! _nginx -p $OPENSHIFT_HHVM_DIR -c $NGINX_CFG_FILE -g "error_log ${OPENSHIFT_HHVM_LOG_DIR}nginx_error.log;"; then
        echo 1>&2
        cat ${OPENSHIFT_HHVM_LOG_DIR}nginx_error.log 1>&2
        return 1
    fi
}

function start() {
    local VERSION="$(cat $OPENSHIFT_HHVM_DIR/env/OPENSHIFT_HHVM_VERSION)"
    client_message "Version: ${VERSION} "

    # Recreate socket
    if [ -f ${OPENSHIFT_DATA_DIR}hhvm.sock ]; then
        unlink ${OPENSHIFT_DATA_DIR}hhvm.sock
    fi

    build_nginx_config && build_phpfpm_config
    _start_php
    _start_nginx
}

function _stop_service() {
    if [ -f "$1" ]; then
        pid=`cat "$1" 2>/dev/null`
    fi
    if [ -n "$pid" ]; then
            if kill -0 $pid > /dev/null 2>&1; then
            client_message "killing process ${pid}"
            kill $pid
            wait_for_stop $pid
        fi
        if [ -f "$1" ]; then
            rm -f "$1"
        fi
    fi
}

function stop() {
   _stop_service $NGINX_PID_FILE
   _stop_service $PHP_PID_FILE
}

function configtest() {
    client_message "Testing Nginx configuration files..."
    ${OPENSHIFT_HHVM_DIR}usr/sbin/nginx -c $NGINX_CFG_FILE -g "error_log stderr;" -t
    return $?
}

function status() {
   if output=$(curl -I http://$OPENSHIFT_HHVM_IP:$OPENSHIFT_HHVM_PORT/ 2>&1 )
   then
      client_result "Application is running"
   else
      client_result "Application is either stopped or inaccessible"
      client_result $output
   fi
}

function tidy() {
    client_message "Emptying log dir: $OPENSHIFT_HHVM_LOG_DIR"
    shopt -s dotglob
    rm -rf $OPENSHIFT_HHVM_LOG_DIR/*
    return 0
}

function build() {
    return 0
}

function fetch_package() {
    return 0
}

function upgrade_binaries() {
    local version="$1";
    local release_url="https://github.com/tengyifei/openshift-cartridge-nginx-hhvm/archive/${version}.tar.gz"
    local tmp_dir="/tmp/upgrade_package/"
    local repo_name="openshift-cartridge-nginx-hhvm"

    # Create directories for download and extraction
    mkdir -p "${tmp_dir}"
    printf "Fetching latest binaries...\n"
    curl "$release_url" -L -s > "${tmp_dir}${version}.tgz"

    printf "Extracting latest binaries...\n"
    tar xzf "${tmp_dir}${version}.tgz" -C "${tmp_dir}"

    printf "Preparing update\n"
    local bin_location="${tmp_dir}${repo_name}-${version}"
    printf "Stopping cartridge...\n"
    stop

    printf "Copying new binaries\n"

    rm -rf "${OPENSHIFT_HHVM_DIR}usr/bin"
    mkdir "${OPENSHIFT_HHVM_DIR}usr/bin"

    rm -rf "${OPENSHIFT_HHVM_DIR}usr/sbin"
    mkdir "${OPENSHIFT_HHVM_DIR}usr/sbin"

    cp -R "${bin_location}/versions/shared/usr/bin" "${OPENSHIFT_HHVM_DIR}usr"
    cp -R "${bin_location}/versions/shared/usr/sbin" "${OPENSHIFT_HHVM_DIR}usr"

    printf "Writing new version to version file\n"
    echo "$version" > "$OPENSHIFT_HHVM_DIR/env/OPENSHIFT_HHVM_VERSION"

    start
    printf "Finished upgrade process!\n"
}

function update() {
    local versions_url="http://tengyifei.github.io/openshift-cartridge-nginx-hhvm/versions.manifest";
    local version_file="/tmp/versions.manifest"

    local VERSION="$(cat $OPENSHIFT_HHVM_DIR/env/OPENSHIFT_HHVM_VERSION)"
    echo "Current version: ${VERSION} "

    # Download list of available versions
    curl "$versions_url" -L -s > "$version_file"

    echo "Available versions:"
    cat "$version_file"
    echo

    # Obtain last line
    local latest_version_line="$(cat $version_file | tail -1)"
    local latest_version="${latest_version_line%% *}"

    echo "Latest version: $latest_version"
    echo

    if [[ $latest_version == $VERSION ]]
    then
            printf "No upgrade necessary.\n"
            return 0
    fi

    read -p "Do you want to upgrade? (Y/N): " -n 1 -r
    echo

    if [[ $REPLY =~ ^[Yy]$ ]]
    then
            upgrade_binaries "$latest_version"
    fi

    return 0
}

case "$1" in
    start)           start;;
    stop)            stop;;
    restart)         stop; start;;
    status)          status;;
    configtest)      configtest ;;
    tidy)            tidy;;
    build)           build;;
    update)          update;;
    deploy)          exit 0;;
    *)               exit 0
esac
